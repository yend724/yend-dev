---
description: frontend用のコーディングルール
globs: 
---
HTML、CSS、TypeScript、Node.js、Next.js App Router、React、Tailwind CSS に精通していることを前提とする。

## コードのスタイルと構造

- 正確な例を用い、簡潔かつ技術的な TypeScript コードを書く  
- 関数型および宣言型のプログラミングパターンを用い、クラスの使用は避ける  
- コードの重複よりも、明示的な繰り返しとモジュール化を優先する  
- 補助動詞（`isLoading`、`hasError` など）を用いた説明的な変数名を使用する  
- 型定義、ロジック、UI、静的リソースなどにコードベースを分割・整理する

## 命名規則

- ディレクトリ名にはダッシュ付きの小文字（kebab-case）を使用する（例：`components/auth-wizard`）  
- コンポーネントはすべて名前付きエクスポートとする  
- 変数・関数にはキャメルケース、コンポーネントにはパスカルケースを用いる

## TypeScript の使用方針

- すべてのコードに TypeScript を使用する  
- `enum` は使用せず、オブジェクトによるマップまたはリテラル型を用いる  
- コンポーネント定義には関数型コンポーネント + `type` を用いる
- Non-null assertion(`!`)は避ける
- `as` の利用は可能な限り避ける

## 構文と書式

- 純粋な関数はアロー関数で記述する  
- 単純な処理には簡潔な構文を用いる  
- JSX は宣言的で読みやすく記述する  
- コンポーネント定義には `React.FC` を使用する

## ディレクトリ構造とアーキテクチャ

- Feature-Sliced Design（FSD）に基づいた構造を採用する  
- `shared` 以外のレイヤー間での横断的な依存は避ける  
- 依存関係は必ず「上位 → 下位」方向に限定し、逆方向の依存は許容しない  
- コンポーネントの責務が複数レイヤーにまたがる場合は、責務ごとに明確に分離して配置する

## UI とスタイリング

- Tailwind CSS を用いてモバイルファーストのレスポンシブデザインを構築する  
- ユーティリティクラスを中心に、迅速な開発と一貫性を両立する  
- Tailwind の `@apply` は使用しない  
- グローバルスタイルの使用は最小限とし、スコープされたスタイルを優先する

## パフォーマンスの最適化

- `'use client'`、`useEffect`、`useState` の使用は最小限にとどめ、可能な限り React Server Components（RSC）を用いる  
- フォールバック付きの `Suspense` を活用し、クライアントコンポーネントの遅延読み込みを行う  
- 非クリティカルな UI には `dynamic()` によるコード分割を使用する  
- 画像最適化においては以下を遵守する：
  - `next/image` を使用する  
  - WebP 形式を使用する  
  - `width` / `height` 属性を明示する  
  - `decoding="async"` を有効にする

## データ取得とルーティング

- Next.js App Router の標準仕様に従う（例：`app/` ディレクトリ、`server actions`、`loading.tsx`）  
- データ取得は基本的にサーバーコンポーネントで行う  
- クライアントでの取得が必要な場合は、責務を分離し明確にする

## 状態管理と副作用

- 状態共有が必要な場合は、まず props のリフトアップを検討する  
- prop drilling が煩雑な場合は、React Context を使用する

## エラー処理と堅牢性

- すべての関数において、エラー条件は関数の冒頭でガード節によって処理する  
- 正常系（ハッピーパス）は関数の末尾に記述する  
- 予測可能なエラーは戻り値の構造として明示的にモデル化する  
- API 通信や外部依存は try-catch または型定義で安全に扱う  
- 致命的な UI エラーにはエラー境界を設ける

## セキュリティ

- ユーザー入力は常にサニタイズする  
- `dangerouslySetInnerHTML` は原則使用しない。やむを得ず使用する場合は信頼できるデータに限定する  
- SSR / CSR の挙動やヘッダー操作に関して、XSS・CSRF などの脆弱性を考慮する

## アクセシビリティ（a11y）

- セマンティックな HTML 要素を使用する（例：`button`、`nav`、`main`）  
- 適切な ARIA 属性を設定する  
- キーボード操作に対応する（`focus` 管理、`Tab` 移動など）

## テスト

- 単体テストには Vitest を使用する  
- コンポーネントテストには React Testing Library を使用する  
- E2E テストには Playwright を用いる  
- スナップショットテストは最小限とし、意味のあるケースに限定する

## フォームとバリデーション

- フォームには制御されたコンポーネントを使用する  
- バリデーションはクライアント・サーバー両方で実装する  
- スキーマベースのバリデーションには Zod または Valibot を使用する